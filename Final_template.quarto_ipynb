{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Final Project\"\n",
        "author: \"Dylan Xia  Kevin Yao Yuqing Wen\"\n",
        "date: \"2024/12/01\"\n",
        "format: \n",
        "  pdf:\n",
        "    include-in-header: \n",
        "       text: |\n",
        "         \\usepackage{fvextra}\n",
        "         \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n",
        "include-before-body:\n",
        "  text: |\n",
        "    \\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n",
        "      showspaces = false,\n",
        "      showtabs = false,\n",
        "      breaksymbolleft={},\n",
        "      breaklines\n",
        "    }\n",
        "output:\n",
        "  echo: false\n",
        "  eval: false\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "    - Partner 1 : Dylan Xia; dizhexia\n",
        "    - Partner 2 : Kevin Yao; qiyin\n",
        "    - Partner 3 : Yuqing Wen, wyuqing\n"
      ],
      "id": "103fb908"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from shapely.geometry import shape\n",
        "import requests\n",
        "import altair as alt\n",
        "import seaborn as sns\n",
        "\n",
        "import warnings \n",
        "warnings.filterwarnings('ignore')\n",
        "alt.renderers.enable(\"png\")"
      ],
      "id": "ce8324e5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Step 1: Plot data based on Unemployment Rate\n",
        "\n",
        "## Unemployment Rate General Trend (2011~2020)\n"
      ],
      "id": "40e36ad3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Step 1: Load the unemployment data\n",
        "data_path = \"state_yearly_unemployment_rate_with_state_name.csv\"\n",
        "unemployment_data = pd.read_csv(data_path)\n",
        "\n",
        "# Step 2: Calculate the average unemployment rate by year\n",
        "# Assuming the dataset contains columns: 'year', 'unemployment_rate'\n",
        "yearly_avg_unemployment = (\n",
        "    unemployment_data.groupby('year')['unemployment_rate']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Convert unemployment rate to percentage\n",
        "yearly_avg_unemployment['unemployment_rate'] = yearly_avg_unemployment['unemployment_rate'] * 100\n",
        "\n",
        "# Step 3: Plot the line chart\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "plt.plot(\n",
        "    yearly_avg_unemployment['year'], \n",
        "    yearly_avg_unemployment['unemployment_rate'], \n",
        "    marker='o', \n",
        "    linestyle='-', \n",
        "    label='Average Unemployment Rate'\n",
        ")\n",
        "\n",
        "# Add labels and title\n",
        "plt.xlabel('Year', fontsize=12)\n",
        "plt.ylabel('Unemployment Rate (%)', fontsize=12)\n",
        "plt.title('Yearly Average Unemployment Rate (All States)', fontsize=16)\n",
        "\n",
        "# Customize grid and legend\n",
        "plt.grid(visible=True, linestyle='--', alpha=0.6)\n",
        "plt.legend(fontsize=12)\n",
        "plt.xticks(yearly_avg_unemployment['year'], rotation=45)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "d1fd73ea",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Unemployment Rate (2011~2015) & Unemployment Rate (2016~2020), Map by State\n"
      ],
      "id": "eab8b9c5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from shapely.geometry import shape\n",
        "import requests\n",
        "\n",
        "# Step 1: Load the unemployment data\n",
        "data_path = \"state_yearly_unemployment_rate_with_state_name.csv\"\n",
        "unemployment_data = pd.read_csv(data_path)\n",
        "\n",
        "# Calculate average unemployment rates for 2011-2015\n",
        "unemployment_avg_2011_2015 = (\n",
        "    unemployment_data[(unemployment_data['year'] >= 2011) & (unemployment_data['year'] <= 2015)]\n",
        "    .groupby('state_name')['unemployment_rate']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "unemployment_avg_2011_2015['unemployment_rate'] = unemployment_avg_2011_2015['unemployment_rate'] * 100\n",
        "\n",
        "# Calculate average unemployment rates for 2016-2019\n",
        "unemployment_avg_2016_2019 = (\n",
        "    unemployment_data[(unemployment_data['year'] >= 2016) & (unemployment_data['year'] <= 2019)]\n",
        "    .groupby('state_name')['unemployment_rate']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "unemployment_avg_2016_2019['unemployment_rate'] = unemployment_avg_2016_2019['unemployment_rate'] * 100\n",
        "\n",
        "# Find global vmin and vmax for consistent coloring\n",
        "all_data = pd.concat([unemployment_avg_2011_2015, unemployment_avg_2016_2019])\n",
        "vmin = all_data['unemployment_rate'].min()\n",
        "vmax = all_data['unemployment_rate'].max()\n",
        "\n",
        "# Load GeoJSON data\n",
        "shape_url = 'https://data.ojp.usdoj.gov/resource/5fdt-n5ne.json'\n",
        "response = requests.get(shape_url)\n",
        "\n",
        "if response.status_code == 200:\n",
        "    geo_data = response.json()\n",
        "else:\n",
        "    raise ValueError(f\"Failed to fetch GeoJSON data. HTTP Status Code: {response.status_code}\")\n",
        "\n",
        "geometries = [shape(feature[\"the_geom\"]) for feature in geo_data]\n",
        "properties = [{key: feature[key] for key in feature if key != \"the_geom\"} for feature in geo_data]\n",
        "shape_data = gpd.GeoDataFrame(properties, geometry=geometries)\n",
        "\n",
        "# Function to plot a map with specified data\n",
        "def plot_map(data, title):\n",
        "    data['state_name'] = data['state_name'].str.strip()\n",
        "    merged_data = shape_data.merge(data, left_on='state', right_on='state_name', how='left')\n",
        "    merged_data['unemployment_rate'] = merged_data['unemployment_rate'].fillna(0)\n",
        "    \n",
        "    # Plot map\n",
        "    fig, ax = plt.subplots(1, 1, figsize=(15, 10))\n",
        "    merged_data.plot(\n",
        "        column='unemployment_rate', \n",
        "        cmap='Blues', \n",
        "        linewidth=0.8, \n",
        "        ax=ax, \n",
        "        edgecolor='black', \n",
        "        legend=True,\n",
        "        legend_kwds={\n",
        "            'shrink': 0.7, \n",
        "            'orientation': \"horizontal\", \n",
        "            'pad': 0.05, \n",
        "            'aspect': 40, \n",
        "            'label': \"Unemployment Rate (%)\"\n",
        "        },\n",
        "        vmin=vmin,  # Set global min\n",
        "        vmax=vmax   # Set global max\n",
        "    )\n",
        "    merged_data.boundary.plot(ax=ax, linewidth=0.8, color=\"black\")\n",
        "    ax.set_xlim([-180, -60])  # Extends to cover Alaska and Hawaii\n",
        "    ax.set_ylim([15, 72])     # Adjusted for both Hawaii and Alaska latitudes\n",
        "    ax.set_title(title, fontsize=16)\n",
        "    ax.set_axis_off()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Plot maps for 2011-2015 and 2016-2019\n",
        "plot_map(unemployment_avg_2011_2015, 'Average Unemployment Rate by State (2011-2015)')\n",
        "plot_map(unemployment_avg_2016_2019, 'Average Unemployment Rate by State (2016-2019)')"
      ],
      "id": "8229dd1f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Unemployment Rate (Difference), Map by State\n"
      ],
      "id": "1490447c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "import matplotlib.pyplot as plt\n",
        "from shapely.geometry import shape\n",
        "import requests\n",
        "\n",
        "# Step 1: Load the unemployment data\n",
        "data_path = \"state_yearly_unemployment_rate_with_state_name.csv\"\n",
        "unemployment_data = pd.read_csv(data_path)\n",
        "\n",
        "# Step 2: Calculate average unemployment rates for 2011-2015 and 2016-2019 by state\n",
        "unemployment_avg_2011_2015 = (\n",
        "    unemployment_data[(unemployment_data['year'] >= 2011) & (unemployment_data['year'] <= 2015)]\n",
        "    .groupby('state_name')['unemployment_rate']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "unemployment_avg_2016_2019 = (\n",
        "    unemployment_data[(unemployment_data['year'] >= 2016) & (unemployment_data['year'] <= 2019)]\n",
        "    .groupby('state_name')['unemployment_rate']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "# Convert to percentage\n",
        "unemployment_avg_2011_2015['unemployment_rate'] = unemployment_avg_2011_2015['unemployment_rate'] * 100\n",
        "unemployment_avg_2016_2019['unemployment_rate'] = unemployment_avg_2016_2019['unemployment_rate'] * 100\n",
        "\n",
        "# Step 3: Calculate the difference between 2016-2019 and 2011-2015\n",
        "unemployment_diff = pd.merge(\n",
        "    unemployment_avg_2016_2019, \n",
        "    unemployment_avg_2011_2015, \n",
        "    on='state_name', \n",
        "    suffixes=('_2016_2019', '_2011_2015')\n",
        ")\n",
        "unemployment_diff['rate_difference'] = (\n",
        "    unemployment_diff['unemployment_rate_2016_2019'] - unemployment_diff['unemployment_rate_2011_2015']\n",
        ")\n",
        "\n",
        "# Step 4: Load the JSON data from the API endpoint for state boundaries\n",
        "shape_url = 'https://data.ojp.usdoj.gov/resource/5fdt-n5ne.json'\n",
        "response = requests.get(shape_url)\n",
        "\n",
        "if response.status_code == 200:\n",
        "    geo_data = response.json()\n",
        "else:\n",
        "    raise ValueError(f\"Failed to fetch GeoJSON data. HTTP Status Code: {response.status_code}\")\n",
        "\n",
        "# Step 5: Convert JSON data to a GeoDataFrame\n",
        "geometries = [shape(feature[\"the_geom\"]) for feature in geo_data]\n",
        "properties = [{key: feature[key] for key in feature if key != \"the_geom\"} for feature in geo_data]\n",
        "shape_data = gpd.GeoDataFrame(properties, geometry=geometries)\n",
        "\n",
        "# Step 6: Merge shape data with unemployment difference data\n",
        "unemployment_diff['state_name'] = unemployment_diff['state_name'].str.strip()\n",
        "merged_data = shape_data.merge(unemployment_diff, left_on='state', right_on='state_name', how='left')\n",
        "\n",
        "# Fill missing values for states with no data\n",
        "merged_data['rate_difference'] = merged_data['rate_difference'].fillna(0)\n",
        "\n",
        "# Step 7: Plot the unemployment difference map\n",
        "fig, ax = plt.subplots(1, 1, figsize=(15, 10))\n",
        "\n",
        "# Plot unemployment difference using a diverging colormap\n",
        "merged_data.plot(\n",
        "    column='rate_difference', \n",
        "    cmap='RdYlGn_r',  # Red-White-Green reversed color map\n",
        "    linewidth=0.8, \n",
        "    ax=ax, \n",
        "    edgecolor='black', \n",
        "    legend=True,\n",
        "    legend_kwds={\n",
        "        'shrink': 0.7, \n",
        "        'orientation': \"horizontal\", \n",
        "        'pad': 0.05, \n",
        "        'aspect': 40, \n",
        "        'label': \"Unemployment Rate Difference (%)\"\n",
        "    }\n",
        ")\n",
        "\n",
        "# Add state boundaries\n",
        "merged_data.boundary.plot(ax=ax, linewidth=0.8, color=\"black\")\n",
        "\n",
        "# Adjust map extent to include Alaska and Hawaii\n",
        "ax.set_xlim([-180, -60])  # Extends to cover Alaska and Hawaii\n",
        "ax.set_ylim([15, 72])     # Adjusted for both Hawaii and Alaska latitudes\n",
        "\n",
        "# Customize the plot further for better visualization\n",
        "ax.set_title('Average Unemployment Rate Difference by State (2016-2019 vs 2011-2015)', fontsize=16)\n",
        "ax.set_axis_off()\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.show()"
      ],
      "id": "8c133d69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Step 2: Plot data based on CPI\n",
        "\n",
        "## CPI Rate General Trend (2011~2020)\n"
      ],
      "id": "9cf84a14"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Load the CPI data from the Excel file\n",
        "file_path = 'CPI_urban_2011-2020_2.0.xlsx'\n",
        "cpi_data = pd.ExcelFile(file_path)\n",
        "\n",
        "# Parse the relevant sheet\n",
        "cpi_sheet = cpi_data.parse('BLS Data Series')\n",
        "\n",
        "# Step 1: Clean the CPI data\n",
        "# Skip the initial rows to extract relevant data\n",
        "cpi_cleaned = cpi_sheet.iloc[3:]\n",
        "\n",
        "# Rename columns for clarity\n",
        "cpi_cleaned.columns = ['Series ID', 'Area Description'] + [f'Annual_{year}' for year in range(2011, 2021)]\n",
        "\n",
        "# Keep only relevant columns (Area Description and CPI values)\n",
        "cpi_cleaned = cpi_cleaned[['Area Description'] + [f'Annual_{year}' for year in range(2011, 2021)]]\n",
        "\n",
        "# Drop rows with missing Area Description (e.g., aggregated regions or unrelated data)\n",
        "cpi_cleaned = cpi_cleaned.dropna(subset=['Area Description'])\n",
        "\n",
        "# Step 2: Calculate the average CPI for all regions for each year\n",
        "average_cpi_by_year = cpi_cleaned[[f'Annual_{year}' for year in range(2011, 2021)]].mean()\n",
        "\n",
        "# Prepare data for plotting\n",
        "years = list(range(2011, 2021))\n",
        "average_cpi = average_cpi_by_year.values\n",
        "\n",
        "# Step 3: Plot the line chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(years, average_cpi, marker='o', linestyle='-', color='blue', label='Average CPI (All Regions)')\n",
        "\n",
        "# Add labels, title, and legend\n",
        "plt.xlabel('Year', fontsize=12)\n",
        "plt.ylabel('Average CPI', fontsize=12)\n",
        "plt.title('Average Consumer Price Index (2011–2020)', fontsize=14)\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.legend()\n",
        "plt.xticks(years, rotation=45)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "id": "a22182ab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## CPI Rate Scatter (Self-Regression)\n"
      ],
      "id": "6ac7255d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Load the CPI data\n",
        "file_path = 'CPI_urban_2011-2020_2.0.xlsx'  # Update this to your file path\n",
        "cpi_data = pd.ExcelFile(file_path)\n",
        "cpi_sheet = cpi_data.parse('BLS Data Series')\n",
        "\n",
        "# Clean the data\n",
        "cpi_cleaned = cpi_sheet.iloc[3:]\n",
        "cpi_cleaned.columns = ['Series ID', 'Area Description'] + [f'Annual_{year}' for year in range(2011, 2021)]\n",
        "cpi_cleaned = cpi_cleaned[['Area Description'] + [f'Annual_{year}' for year in range(2011, 2021)]]\n",
        "cpi_cleaned = cpi_cleaned.dropna(subset=['Area Description'])\n",
        "\n",
        "# Convert annual columns to numeric\n",
        "for year in range(2011, 2021):\n",
        "    cpi_cleaned[f'Annual_{year}'] = pd.to_numeric(cpi_cleaned[f'Annual_{year}'], errors='coerce')\n",
        "\n",
        "# Calculate average CPI for 2011-2015 and 2016-2019\n",
        "cpi_cleaned['CPI_2011_2015'] = cpi_cleaned[[f'Annual_{year}' for year in range(2011, 2016)]].mean(axis=1)\n",
        "cpi_cleaned['CPI_2016_2019'] = cpi_cleaned[[f'Annual_{year}' for year in range(2016, 2020)]].mean(axis=1)\n",
        "\n",
        "# Filter out rows where averages could not be computed\n",
        "cpi_cleaned = cpi_cleaned.dropna(subset=['CPI_2011_2015', 'CPI_2016_2019'])\n",
        "\n",
        "# Calculate percentage change\n",
        "cpi_cleaned['CPI_Percent_Change'] = ((cpi_cleaned['CPI_2016_2019'] - cpi_cleaned['CPI_2011_2015']) / cpi_cleaned['CPI_2011_2015']) * 100\n",
        "\n",
        "# Select top 5 and bottom 5 areas based on percentage change\n",
        "top5_changes = cpi_cleaned.nlargest(5, 'CPI_Percent_Change')\n",
        "bottom5_changes = cpi_cleaned.nsmallest(5, 'CPI_Percent_Change')\n",
        "\n",
        "# Scatter plot with regression and annotations\n",
        "plt.figure(figsize=(12, 8))\n",
        "\n",
        "# Scatter plot for all areas\n",
        "sns.scatterplot(x='CPI_2011_2015', y='CPI_2016_2019', data=cpi_cleaned, color='blue', label='Areas')\n",
        "\n",
        "# Highlight top 5 areas\n",
        "sns.scatterplot(x=top5_changes['CPI_2011_2015'], y=top5_changes['CPI_2016_2019'], color='red', label='Top 5 Areas')\n",
        "for i in range(top5_changes.shape[0]):\n",
        "    plt.text(\n",
        "        x=top5_changes['CPI_2011_2015'].iloc[i],\n",
        "        y=top5_changes['CPI_2016_2019'].iloc[i],\n",
        "        s=top5_changes['Area Description'].iloc[i],\n",
        "        color='red', fontsize=9, fontweight='bold'\n",
        "    )\n",
        "\n",
        "# Highlight bottom 5 areas\n",
        "sns.scatterplot(x=bottom5_changes['CPI_2011_2015'], y=bottom5_changes['CPI_2016_2019'], color='green', label='Bottom 5 Areas')\n",
        "for i in range(bottom5_changes.shape[0]):\n",
        "    plt.text(\n",
        "        x=bottom5_changes['CPI_2011_2015'].iloc[i],\n",
        "        y=bottom5_changes['CPI_2016_2019'].iloc[i],\n",
        "        s=bottom5_changes['Area Description'].iloc[i],\n",
        "        color='green', fontsize=9, fontweight='bold'\n",
        "    )\n",
        "\n",
        "# Add the y=x line (diagonal dashed line)\n",
        "x_vals = np.linspace(cpi_cleaned['CPI_2011_2015'].min(), cpi_cleaned['CPI_2011_2015'].max(), 100)\n",
        "plt.plot(x_vals, x_vals, linestyle='--', color='gray', label='y = x')\n",
        "\n",
        "# Regression line\n",
        "X = sm.add_constant(cpi_cleaned['CPI_2011_2015'])  # Add constant term for regression\n",
        "model = sm.OLS(cpi_cleaned['CPI_2016_2019'], X).fit()\n",
        "y_vals = model.predict(X)\n",
        "plt.plot(cpi_cleaned['CPI_2011_2015'], y_vals, color='red', label='Regression Line')\n",
        "\n",
        "# Labels, title, and legend\n",
        "plt.xlabel('Average CPI (2011–2015)', fontsize=12)\n",
        "plt.ylabel('Average CPI (2016–2019)', fontsize=12)\n",
        "plt.title('Scatter Plot and Regression of CPI (2011–2015 vs. 2016–2019)', fontsize=14)\n",
        "plt.legend()\n",
        "plt.grid(alpha=0.5)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n",
        "# Display regression summary\n",
        "print(model.summary())\n",
        "\n",
        "# Display the top 5 and bottom 5 areas\n",
        "import ace_tools as tools\n",
        "tools.display_dataframe_to_user(name=\"Top 5 Areas with Largest CPI Percentage Change\", dataframe=top5_changes)\n",
        "tools.display_dataframe_to_user(name=\"Bottom 5 Areas with Smallest CPI Percentage Change\", dataframe=bottom5_changes)"
      ],
      "id": "98350e47",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}